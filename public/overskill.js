/**
 * OverSkill.js - Client-side utility for OverSkill-generated applications
 * Version: 1.0.0
 * 
 * Provides cross-frame communication, error handling, and development tools
 * for applications generated by the OverSkill platform.
 */

(function() {
  'use strict';
  
  // Prevent multiple initialization
  if (window.OverSkill) {
    console.warn('[OverSkill] Already initialized');
    return;
  }

  window.OverSkill = {
    version: '1.0.0',
    
    /**
     * Cross-frame communication with OverSkill editor
     */
    messaging: {
      /**
       * Send messages to parent OverSkill editor
       * @param {string} type - Message type
       * @param {*} data - Message data
       */
      toEditor: function(type, data) {
        if (window.parent !== window) {
          try {
            window.parent.postMessage({
              source: 'overskill_app',
              type: type,
              data: data,
              timestamp: Date.now(),
              url: window.location.href
            }, '*');
          } catch (error) {
            console.warn('[OverSkill] Failed to send message to editor:', error);
          }
        }
      },
      
      /**
       * Listen for messages from OverSkill editor
       * @param {function} callback - Message handler
       */
      onMessage: function(callback) {
        window.addEventListener('message', function(event) {
          if (event.data?.source === 'overskill_editor') {
            try {
              callback(event.data);
            } catch (error) {
              console.error('[OverSkill] Error handling message:', error);
            }
          }
        });
      }
    },
    
    /**
     * Enhanced error handling and reporting
     */
    errors: {
      /**
       * Capture and report errors to editor
       * @param {Error} error - The error object
       * @param {Object} context - Additional context
       */
      capture: function(error, context) {
        context = context || {};
        
        const errorData = {
          message: error.message || 'Unknown error',
          stack: error.stack || '',
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: Date.now(),
          context: context
        };
        
        console.error('[OverSkill] Error captured:', errorData);
        OverSkill.messaging.toEditor('error', errorData);
      },
      
      /**
       * Set up global error handlers
       */
      initialize: function() {
        // Capture JavaScript errors
        window.addEventListener('error', function(event) {
          OverSkill.errors.capture(event.error || new Error(event.message), {
            type: 'javascript_error',
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
          });
        });
        
        // Capture unhandled promise rejections
        window.addEventListener('unhandledrejection', function(event) {
          OverSkill.errors.capture(
            new Error(event.reason?.message || event.reason || 'Unhandled promise rejection'), 
            {
              type: 'unhandled_promise_rejection',
              reason: event.reason
            }
          );
        });
      }
    },
    
    /**
     * Element selection and highlighting for development
     */
    selection: {
      enabled: false,
      currentHighlight: null,
      
      /**
       * Enable element selection mode
       */
      enable: function() {
        if (OverSkill.selection.enabled) return;
        
        OverSkill.selection.enabled = true;
        document.body.style.cursor = 'crosshair';
        document.body.setAttribute('data-overskill-selection', 'true');
        
        document.addEventListener('click', OverSkill.selection.handleClick, true);
        document.addEventListener('mouseover', OverSkill.selection.handleHover, true);
        document.addEventListener('mouseout', OverSkill.selection.handleMouseOut, true);
        
        OverSkill.messaging.toEditor('selection_enabled', { timestamp: Date.now() });
      },
      
      /**
       * Disable element selection mode
       */
      disable: function() {
        if (!OverSkill.selection.enabled) return;
        
        OverSkill.selection.enabled = false;
        document.body.style.cursor = '';
        document.body.removeAttribute('data-overskill-selection');
        
        document.removeEventListener('click', OverSkill.selection.handleClick, true);
        document.removeEventListener('mouseover', OverSkill.selection.handleHover, true);
        document.removeEventListener('mouseout', OverSkill.selection.handleMouseOut, true);
        
        OverSkill.selection.clearHighlight();
        OverSkill.messaging.toEditor('selection_disabled', { timestamp: Date.now() });
      },
      
      /**
       * Handle element selection click
       * @param {Event} event - Click event
       */
      handleClick: function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const element = event.target;
        const elementInfo = OverSkill.selection.getElementInfo(element);
        
        OverSkill.messaging.toEditor('element_selected', elementInfo);
        OverSkill.selection.disable();
      },
      
      /**
       * Handle element hover highlighting
       * @param {Event} event - Mouseover event
       */
      handleHover: function(event) {
        if (!OverSkill.selection.enabled) return;
        
        OverSkill.selection.clearHighlight();
        OverSkill.selection.highlightElement(event.target);
      },
      
      /**
       * Handle mouse out
       * @param {Event} event - Mouseout event
       */
      handleMouseOut: function(event) {
        if (!OverSkill.selection.enabled) return;
        // Only clear if we're not moving to a child element
        if (!event.target.contains(event.relatedTarget)) {
          OverSkill.selection.clearHighlight();
        }
      },
      
      /**
       * Get detailed element information
       * @param {Element} element - DOM element
       * @returns {Object} Element information
       */
      getElementInfo: function(element) {
        const rect = element.getBoundingClientRect();
        
        return {
          tagName: element.tagName.toLowerCase(),
          className: element.className || '',
          id: element.id || '',
          textContent: (element.textContent || '').trim().substring(0, 200),
          attributes: Array.from(element.attributes || []).map(function(attr) {
            return {
              name: attr.name,
              value: attr.value
            };
          }),
          position: {
            top: rect.top,
            left: rect.left,
            width: rect.width,
            height: rect.height
          },
          selector: OverSkill.selection.getSelector(element),
          outerHTML: element.outerHTML ? element.outerHTML.substring(0, 500) : ''
        };
      },
      
      /**
       * Generate CSS selector for element
       * @param {Element} element - DOM element
       * @returns {string} CSS selector
       */
      getSelector: function(element) {
        if (element.id) {
          return '#' + element.id;
        }
        
        if (element.className) {
          const classes = element.className.split(' ').filter(Boolean);
          if (classes.length > 0) {
            return '.' + classes[0];
          }
        }
        
        // Fallback to tag name
        return element.tagName.toLowerCase();
      },
      
      /**
       * Highlight element visually
       * @param {Element} element - DOM element
       */
      highlightElement: function(element) {
        OverSkill.selection.currentHighlight = element;
        element.style.outline = '2px solid #3b82f6';
        element.style.outlineOffset = '2px';
        element.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
      },
      
      /**
       * Clear element highlighting
       */
      clearHighlight: function() {
        if (OverSkill.selection.currentHighlight) {
          const element = OverSkill.selection.currentHighlight;
          element.style.outline = '';
          element.style.outlineOffset = '';
          element.style.backgroundColor = '';
          OverSkill.selection.currentHighlight = null;
        }
      }
    },
    
    /**
     * Performance monitoring
     */
    performance: {
      /**
       * Track and report page load performance
       */
      trackPageLoad: function() {
        window.addEventListener('load', function() {
          // Wait a bit for everything to settle
          setTimeout(function() {
            try {
              const navigation = performance.getEntriesByType('navigation')[0];
              const perfData = {
                loadTime: performance.now(),
                domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart : 0,
                domComplete: navigation ? navigation.domComplete - navigation.domInteractive : 0,
                resources: performance.getEntriesByType('resource').length,
                timestamp: Date.now()
              };
              
              OverSkill.messaging.toEditor('performance', perfData);
            } catch (error) {
              console.warn('[OverSkill] Failed to collect performance data:', error);
            }
          }, 100);
        });
      }
    },
    
    /**
     * Initialize OverSkill utilities
     */
    initialize: function() {
      try {
        // Set up error handling
        OverSkill.errors.initialize();
        
        // Set up performance tracking
        OverSkill.performance.trackPageLoad();
        
        // Set up message handling
        OverSkill.messaging.onMessage(function(message) {
          switch (message.type) {
            case 'enable_selection':
              OverSkill.selection.enable();
              break;
            case 'disable_selection':
              OverSkill.selection.disable();
              break;
            case 'ping':
              OverSkill.messaging.toEditor('pong', { timestamp: Date.now() });
              break;
            default:
              console.log('[OverSkill] Unknown message type:', message.type);
          }
        });
        
        // Notify editor that app is ready
        OverSkill.messaging.toEditor('app_ready', {
          url: window.location.href,
          title: document.title,
          timestamp: Date.now(),
          overskillVersion: OverSkill.version
        });
        
        console.log('[OverSkill] Initialized v' + OverSkill.version);
        
      } catch (error) {
        console.error('[OverSkill] Initialization failed:', error);
      }
    }
  };
  
  // Auto-initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', OverSkill.initialize);
  } else {
    // DOM is already ready
    OverSkill.initialize();
  }
  
})();