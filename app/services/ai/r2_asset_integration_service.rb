# Service to integrate R2 asset management into app generation and file operations
# Ensures asset resolver files are included and @/assets/ imports are transformed

module Ai
  class R2AssetIntegrationService
    def initialize(app)
      @app = app
      @transformer = R2AssetTransformer.new(app)
    end
    
    # Check if R2 asset resolver files are present in the app
    # Note: These files are now included in the overskill_20250728 template by default
    def ensure_asset_resolver_files_present
      Rails.logger.info "[R2Integration] Checking asset resolver files for app #{@app.id}"
      
      required_files = [
        'src/assetResolver.js',
        'src/useAsset.js',
        'src/LazyImage.jsx'
      ]
      
      missing_files = required_files.select do |file_path|
        !@app.app_files.exists?(path: file_path)
      end
      
      if missing_files.any?
        Rails.logger.warn "[R2Integration] Missing asset resolver files: #{missing_files.join(', ')}"
        Rails.logger.info "[R2Integration] These files should be included in the overskill_20250728 template"
      else
        Rails.logger.info "[R2Integration] All asset resolver files are present"
      end
    end
    
    # Transform file content during save to replace @/assets/ imports
    def transform_file_content(content, file_path)
      return content unless should_transform?(file_path)
      
      Rails.logger.debug "[R2Integration] Checking for asset imports in #{file_path}"
      
      # Transform @/assets/ patterns
      transformed_content = @transformer.transform_content(content, file_path)
      
      # Log if transformations were made
      if transformed_content != content
        Rails.logger.info "[R2Integration] Transformed asset imports in #{file_path}"
      end
      
      transformed_content
    end
    
    # Add asset resolver import to a file if it uses assetResolver but doesn't import it
    def ensure_asset_resolver_import(content, file_path)
      return content unless should_transform?(file_path)
      return content if content.include?('import') && content.include?('assetResolver')
      return content unless content.include?('assetResolver.resolve')
      
      # Add import statement
      import_statement = if file_path.end_with?('.tsx', '.jsx')
        "import assetResolver from './assetResolver';\n"
      else
        "const { assetResolver } = require('./assetResolver');\n"
      end
      
      lines = content.split("\n")
      insert_index = find_import_insertion_point(lines)
      lines.insert(insert_index, import_statement.chomp)
      
      Rails.logger.info "[R2Integration] Added assetResolver import to #{file_path}"
      lines.join("\n")
    end
    
    # Generate app configuration for R2 assets
    def generate_app_config
      {
        APP_ID: @app.id,
        ENVIRONMENT: Rails.env,
        R2_BASE_URL: ENV['CLOUDFLARE_R2_PUBLIC_URL'] || 'https://pub.overskill.com',
        USE_LOCAL_ASSETS: Rails.env.development?.to_s
      }
    end
    
    # Create environment configuration file for the app
    def create_env_file
      config = generate_app_config
      
      env_content = <<~ENV
        # App Configuration - Generated by OverSkill
        VITE_APP_ID=#{config[:APP_ID]}
        VITE_ENVIRONMENT=#{config[:ENVIRONMENT]}
        VITE_R2_BASE_URL=#{config[:R2_BASE_URL]}
        VITE_USE_LOCAL_ASSETS=#{config[:USE_LOCAL_ASSETS]}
        
        # Supabase Configuration (if needed)
        VITE_SUPABASE_URL=#{ENV['SUPABASE_URL'] || ''}
        VITE_SUPABASE_ANON_KEY=#{ENV['SUPABASE_ANON_KEY'] || ''}
      ENV
      
      # Create or update .env.local file
      env_file = @app.app_files.find_or_initialize_by(path: '.env.local')
      env_file.assign_attributes(
        content: env_content,
        file_type: 'env',
        team: @app.team
      )
      env_file.save!
      
      Rails.logger.info "[R2Integration] Created environment configuration file"
    end
    
    # Update Vite config to support asset resolver aliases
    def update_vite_config
      vite_config_content = <<~JS
        import { defineConfig } from 'vite'
        import react from '@vitejs/plugin-react-swc'
        import path from 'path'

        export default defineConfig({
          plugins: [react()],
          resolve: {
            alias: {
              '@': path.resolve(__dirname, 'src'),
            }
          },
          define: {
            'process.env.VITE_APP_ID': JSON.stringify(process.env.VITE_APP_ID),
            'process.env.VITE_ENVIRONMENT': JSON.stringify(process.env.VITE_ENVIRONMENT),
            'process.env.VITE_R2_BASE_URL': JSON.stringify(process.env.VITE_R2_BASE_URL),
            'process.env.VITE_USE_LOCAL_ASSETS': JSON.stringify(process.env.VITE_USE_LOCAL_ASSETS),
          },
          build: {
            target: 'esnext',
            minify: 'esbuild',
            rollupOptions: {
              output: {
                manualChunks: {
                  vendor: ['react', 'react-dom', 'react-router-dom'],
                  supabase: ['@supabase/supabase-js']
                }
              }
            }
          }
        })
      JS
      
      # Create or update vite.config.js
      vite_file = @app.app_files.find_or_initialize_by(path: 'vite.config.js')
      vite_file.assign_attributes(
        content: vite_config_content,
        file_type: 'javascript',
        team: @app.team
      )
      vite_file.save!
      
      Rails.logger.info "[R2Integration] Updated Vite configuration"
    end
    
    # Complete setup for R2 asset management in an app
    def setup_complete_integration
      Rails.logger.info "[R2Integration] Setting up complete R2 integration for app #{@app.id}"
      
      # Check that asset resolver files are present (should be from template)
      ensure_asset_resolver_files_present
      
      # Create environment configuration
      create_env_file
      
      # Update Vite config
      update_vite_config
      
      # Transform any existing files that use @/assets/
      transform_existing_files
      
      Rails.logger.info "[R2Integration] Complete R2 integration setup finished"
    end
    
    private
    
    def load_template(template_name)
      template_path = Rails.root.join("app/services/ai/templates/#{template_name}")
      File.read(template_path)
    rescue => e
      Rails.logger.error "[R2Integration] Failed to load template #{template_name}: #{e.message}"
      ""
    end
    
    def should_transform?(file_path)
      ['.js', '.jsx', '.ts', '.tsx'].any? { |ext| file_path.end_with?(ext) }
    end
    
    def find_import_insertion_point(lines)
      last_import_index = -1
      
      lines.each_with_index do |line, index|
        if line.strip.start_with?('import ') || (line.strip.start_with?('const ') && line.include?('require('))
          last_import_index = index
        elsif line.strip.start_with?('//') || line.strip.start_with?('/*') || line.strip.empty?
          next
        else
          break
        end
      end
      
      last_import_index + 1
    end
    
    def transform_existing_files
      @app.app_files.where("path LIKE '%.js' OR path LIKE '%.jsx' OR path LIKE '%.ts' OR path LIKE '%.tsx'").find_each do |file|
        if file.content.include?('@/assets/')
          Rails.logger.info "[R2Integration] Transforming existing file: #{file.path}"
          transformed_content = transform_file_content(file.content, file.path)
          file.update!(content: transformed_content) if transformed_content != file.content
        end
      end
    end
    
    # Generate a window config injection script for runtime configuration
    def generate_config_script
      config = generate_app_config
      
      <<~JS
        // App Configuration - Injected at runtime
        window.APP_CONFIG = {
          APP_ID: '#{config[:APP_ID]}',
          ENVIRONMENT: '#{config[:ENVIRONMENT]}',
          R2_BASE_URL: '#{config[:R2_BASE_URL]}',
          USE_LOCAL_ASSETS: #{config[:USE_LOCAL_ASSETS]}
        };
      JS
    end
    
    # Create a public config.js file for runtime configuration
    def create_public_config_file
      config_content = generate_config_script
      
      config_file = @app.app_files.find_or_initialize_by(path: 'public/config.js')
      config_file.assign_attributes(
        content: config_content,
        file_type: 'javascript',
        team: @app.team
      )
      config_file.save!
      
      Rails.logger.info "[R2Integration] Created public config file"
    end
  end
end